Maven ist ein auf Java  basierendes Build-Management-Tool der Apache Software Foundation, mit dem insbesondere die Erstellung von Java-Programmen standardisiert verwaltet und durchgeführt werden kann.
Der Name Maven kommt aus dem Jiddischen und bedeutet so viel wie „Sammler des Wissens“.Maven versucht, den Grundgedanken „Konvention vor Konfiguration“ (englisch Convention over Configuration) konsequent für den gesamten Zyklus der Softwareerstellung abzubilden. Dabei sollen Softwareentwickler von der Anlage eines Softwareprojekts über das Kompilieren, Testen und Verpacken bis zum Verteilen der Software so unterstützt werden, dass möglichst viele Schritte automatisiert werden können. Folgt man dabei den von Maven vorgegebenen Standards, braucht man für die meisten Aufgaben des Build-Managements nur sehr wenige Konfigurationseinstellungen vorzunehmen, um den Lebenszyklus eines Softwareprojekts abzubilden.
Mit Maven-Archetypen können Gerüste für unterschiedlichste Arten von Softwareprojekten erstellt werden, deren Struktur dem Standard von Maven entspricht.Die Maven-Lebenszyklen sind:

clean zum Löschen von Ergebnissen vorheriger Builds,
default zum Erstellen des Projekts im Rahmen der unten genannten Phasen,
site zum Erstellen von Webseiten zur Projektdokumentation.Maven geht dabei jeweils von einem Zyklus aus, der bei der Softwareerstellung häufig durchlaufen wird. Damit ist aber nicht gesagt, dass jedes Softwareprojekt alle Phasen des im Folgenden – verkürzt – dargestellten default-Zyklus verwendet:

validate (Validieren)
Hier wird geprüft, ob die Projektstruktur gültig und vollständig ist.
compile (Kompilieren)
In dieser Phase wird der Quellcode kompiliert.
test (Testen)
Hier wird der kompilierte Code mit einem passenden Testframework getestet. Maven berücksichtigt dabei in späteren Zyklen, dass Testklassen normalerweise nicht in der auszuliefernden Software vorhanden sind.
package (Verpacken)
Das Kompilat wird – ggf. mit anderen nichtkompilierbaren Dateien – zur Weitergabe verpackt. Häufig handelt es sich dabei um eine Jar-Datei.
integration-test (Test der Integrationsmöglichkeit)
Das Softwarepaket wird auf eine Umgebung (anderer Rechner, anderes Verzeichnis, Anwendungsserver) geladen und seine Funktionsfähigkeit geprüft.
verify (Gültigkeitsprüfung des Software-Pakets)
Prüfungen, ob das Softwarepaket eine gültige Struktur hat und ggf. bestimmte Qualitätskriterien erfüllt.
install (Installieren im lokalen Maven-Repository)
Installiere das Softwarepaket in dem lokalen Maven-Repository, um es in anderen Projekten verwenden zu können, die von Maven verwaltet werden. Dies ist insbesondere für modulare Projekte von Bedeutung.
deploy (Installieren im fernen Maven-Repository)
Stabile Versionen der Software werden auf einem fernen Maven-Repository installiert und stehen damit in Umgebungen mit mehreren Entwicklern allen zur Verfügung.Die Funktionalität jedes Zyklus' kann durch die Einbindung von zusätzlichen Maven-Plug-ins wesentlich erweitert werden. Maven-Plug-ins ermöglichen es, neue Verarbeitungsschritte zu verwenden (z. B. Verteilung auf einen Anwendungsserver) und/oder die Schritte im Standard-Lebenszyklus zu erweitern.Normalerweise werden die Informationen für ein Softwareprojekt, das von Maven unterstützt wird, in einer XML-Datei mit dem Dateinamen pom.xml (für Project Object Model) gespeichert. Diese Datei enthält alle Informationen zum Softwareprojekt und folgt einem standardisierten Format. Wird Maven ausgeführt, prüft es zunächst, ob diese Datei alle nötigen Angaben enthält und ob alle Angaben syntaktisch gültig sind, bevor es weiterarbeitet.Ein wesentliches Element des Prinzips Convention over Configuration ist die Standard-Verzeichnisstruktur von Maven. Sofern ein Projekt sich daran hält, müssen die Pfadnamen nicht spezifiziert werden, was die zentrale Konfigurationsdatei pom.xml stark vereinfacht. Auf oberster Stufe gibt es die beiden Verzeichnisse src und target. src enthält alle Dateien, die als Eingabe für den Verarbeitungsprozess dienen und in target werden automatisch alle erzeugten Dateien abgelegt. Auch weitere Verzeichnisstufen sind standardisiert und Plug-ins, die neue Arten von Eingabedateien verarbeiten oder neue Arten von Ausgabedateien erzeugen, geben dafür Standardpfade vor.
Die folgende Struktur zeigt einige der wichtigsten Verzeichnisse.
src
alle Eingabedateien
src/main
Eingabedateien für die Erstellung des eigentlichen Produkts
src/main/java
Java-Quelltext
src/main/resources
andere Dateien, die für die Übersetzung oder zur Laufzeit benötigt werden, beispielsweise Java-Properties-Dateiensrc/test
Eingabedateien, die für automatisierte Testläufe benötigt werden
src/test/java
JUnit-Testfälle für automatisierte Teststarget
alle erzeugten Dateien
target/classes
kompilierte Java-KlassenIn der pom.xml werden Softwareabhängigkeiten angegeben, die ein von Maven unterstütztes Softwareprojekt zu anderen Softwareprojekten hat. Diese Abhängigkeiten werden aufgelöst, indem Maven zunächst ermittelt, ob die benötigten Dateien in einem lokalen Verzeichnis, dem lokalen Maven-Repository, bereits vorhanden sind. Sind sie es, verwendet Maven z. B. beim Kompilieren die lokal vorhandene Datei von dort, also ohne sie in das Projektverzeichnis zu kopieren.
Kann die Abhängigkeit nicht lokal aufgelöst werden, versucht Maven, sich mit einem konfigurierten Maven-Repository im Intranet oder Internet zu verbinden und von dort die Dateien in das lokale Repository zu kopieren, um sie von nun an lokal verwenden zu können. Bekannte öffentliche Maven-Repositorys sind Apache, Ibiblio, Codehaus oder Java.Net. Firmenweite über das Intranet ansprechbare Maven-Repositorys dienen dazu, selbst entwickelte oder gekaufte Bibliotheken und Frameworks firmenweit allen Projekten zur Verfügung zu stellen. Diese Repositorys werden üblicherweise mittels Software wie Apache Archiva, Nexus, Artifactory, Proximity, Codehaus Maven Proxy oder Dead Simple Maven Proxy realisiert.Fast alle Vorgaben, die Maven macht, können individuell geändert werden, bis auf die Struktur der Projektdatei (pom.xml): Man kann unterschiedliche Projektpfade wählen oder beispielsweise Compiler für andere Sprachen verwenden (sofern von Plug-ins unterstützt).Für die gängigsten Entwicklungsumgebungen (z. B. Eclipse, IntelliJ IDEA oder NetBeans) sind Plug-ins vorhanden, über die sich Maven direkt aus der Entwicklungsumgebung heraus bedienen lässt. Zusätzlich sind Maven-Plug-ins vorhanden, die Dateien erzeugen, welche den Import eines reinen Maven-Projekts in die Entwicklungsumgebung ermöglichen (siehe auch Beispiele).Die Entwicklung von Maven ist in verschiedene Teilprojekte untergliedert.

Maven 1 und Maven 2 werden seit Februar 2014 nicht mehr weiterentwickelt.
Maven 3 stellt den aktuellen Entwicklungszweig der Core-Entwicklung dar.
Plugins entwickelt die meisten Maven-Plug-ins.
Shared Components stellt Softwarekomponenten bereit, die von den anderen Teilprojekten verwendet werden können.
Ant Tasks ermöglicht es, Maven-Funktionalität aus Ant-Skripten heraus zu verwenden.
Doxia ist ein Framework zum Generieren von Content aus den Formaten Almost Plain Text (APT), Confluence, DocBook, FML (FAQ Markup Language), LaTeX, Markdown, Rich Text Format (RTF), TWiki, XDoc und XHTML.
SCM (Source Code Management) entwickelt Software für die Anbindung von Apache an verschiedene Systeme zur Versionsverwaltung wie CVS oder Subversion.
Surefire entwickelt ein Testframework für Maven.
Wagon stellt eine Abstraktionsschicht für Kommunikationsprotokolle wie „Dateizugriff“, HTTP oder FTP bereit.Maven basiert auf einer Plug-in-Architektur, die es ermöglicht, Plug-ins für verschiedene Anwendungen (compile, test, build, deploy, checkstyle, pmd, scp-transfer) auf das Projekt anzuwenden, ohne diese explizit installieren zu müssen. Die Anzahl an Plug-ins ist mittlerweile sehr umfangreich: Die Bandbreite reicht von Plug-ins, die es ermöglichen, direkt aus Maven heraus eine Webanwendung zu starten, um sie im Browser zu testen, über welche, die es ermöglichen, Datenbanken zu testen oder zu erstellen, bis hin zu solchen, die Web Services generieren. Die dafür nötigen Tätigkeiten beschränken sich häufig nur darauf, das gewünschte Plug-in zu ermitteln und einzusetzen.Die folgenden Beispiele lassen sich nach der Installation ausführen. Maven wird beim erstmaligen Ausführen der angegebenen Befehle versuchen, diverse Dateien („Artefakte“) aus dem Internet oder einem internen Repository zu laden.Eingabe
Auf der Kommandozeile eingeben:

mvn archetype:generate -DgroupId=org.example -DartifactId=meine-anwendung

Ergebnis
Ein Unterverzeichnis meine-anwendung wird im aktuellen Verzeichnis erstellt. In diesem Verzeichnis finden sich neben der Datei pom.xml (s. o.) Verzeichnisse, die der standardmäßigen Verzeichnisstruktur von Maven entsprechen.Eingabe
Im Wurzelverzeichnis des Softwareprojekts eingeben:

mvn pmd:pmd

Ergebnis
Die Software PMD wird aus dem Internet geladen, das Projekt wird analysiert und automatisch eine Berichtsseite erstellt.Die erste Version, Maven 1.x, wurde im Jahre 2003 eingeführt und am 13. Juli 2004 als Version 1.0 fertiggestellt. Die Umsetzung passierte jedoch sehr schnell, sodass einige Eigenheiten nicht bedacht wurden. Beispielsweise gab es Performanceprobleme und zu viele Konfigurationsdateien und -angaben.
Deshalb wurde das Konzept überarbeitet und seit dem Jahre 2005 parallel begonnen, Maven 2.x zu entwickeln, welches in Version 2.0 am 19. Oktober 2005 fertiggestellt wurde.Die Entwicklung von Maven 3.x begann im Jahr 2008. Maven 3.0 wurde am 8. Oktober 2010 veröffentlicht. Besonderes Augenmerk lag auf der Kompatibilität zwischen Maven 2 und 3.
Am 18. Februar 2014 wurde das End of Life von Maven 1.x verkündet. Letzte veröffentlichte Version ist Maven 1.1 vom 25. Juni 2007.Am 18. Februar 2014 wurde das End of Life von Maven 2.x verkündet. Letzte veröffentlichte Version ist Maven 2.2.1 aus dem November 2009.