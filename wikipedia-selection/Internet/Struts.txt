Struts ist ein Open-Source-Framework für die Präsentations- und Steuerungsschicht von Java-Webanwendungen.
Struts beschleunigt die Entwicklung von Webanwendungen wesentlich, indem es HTTP-Anfragen in einem standardisierten Prozess verarbeitet. Dabei bedient es sich standardisierter Techniken wie JavaServlets, JavaBeans, Resource Bundles und XML sowie verschiedener Apache-Commons-Pakete.
Für den Entwickler bedeutet das, dass viele applikationsrelevante Funktionen bereits implementiert und einsatzbereit sind. Struts wird bereits in sehr vielen Webanwendungen eingesetzt und gemeinhin als solides Framework angesehen. Struts wurde von Craig McClanahan im Jahr 2000 entwickelt. Seitdem arbeitet eine ständig wachsende Entwicklergemeinde an der Verbesserung des Frameworks.
Ab der Version 2 ist das Struts-Framework mit dem WebWork-Framework verschmolzen.
Der Ansatz von Struts wurde auch für die Entwicklung von Struts4PHP benutzt.
Als eines der bekanntesten Jakarta-Projekte ist Struts im Jahr 2004 zu einem „Apache Toplevel Project“ avanciert.Dem Struts-Framework liegt das Entwurfsmuster „Model View Controller“ zugrunde. Die von Struts zur Verfügung gestellten Komponenten entstammen den Bereichen Präsentation (View) und Programmsteuerung (Controller). Funktionen aus dem Modell-Bereich müssen in einer Anwendung anderweitig implementiert werden. Das Framework beinhaltet zurzeit ungefähr 300 Java-Klassen, die in acht Kernpakete eingeteilt sind.Nachdem die Technik von Java-Servlets eingeführt wurde, erkannte man schnell, dass das Erstellen von HTML-Seiten mit Servlets zeitaufwändig und die Weiterentwicklung von Views sehr mühsam sein kann. Hinzu kam, dass alle drei Komponenten des Model-View-Controller-Konzepts in einem Servlet realisiert wurden. Daraufhin wurde JSP eingeführt, die vor allem dem Webdesigner die Arbeit leichter machte und sich in kurzer Zeit durchsetzte. Daraus entwickelte sich die Model-1-Architektur, die beschreibt, dass Datenhaltung, Geschäftslogik und View in einer JSP anzusiedeln sind, was jedoch bei komplexer Anwendungslogik zu neuen Problemen führt: Die JSP wird in kürzester Zeit unüberschaubar und lässt sich nur durch Entwickler warten, die sowohl HTML- als auch Java-Kenntnisse besitzen. Zwar mildert die Verwendung von Tag-Bibliotheken (wie z. B. JSTL) dieses Problem etwas, weil kein Java-Code mehr benötigt wird. Das konzeptionelle Grundproblem der Vermischung von Präsentation mit fachlicher Funktionalität bleibt jedoch bestehen.Die aufgeführten Probleme haben dazu beigetragen, dass man ein neues Konzept entwickeln musste, das die einzelnen Komponenten klarer voneinander abgrenzt und Java-Servlets und JSP gleichermaßen einbindet. Es entstand die Model-2-Architektur für Webanwendungen, die ihren Einsatz im Struts-Framework gefunden hat. Diese setzt einen Front Controller ein, wonach jeder Aufruf erst zentral verarbeitet und dann an die entsprechenden Controller weitergeleitet wird.Einfache auf POJOs basierende Action-Klassen
Einfache Testbarkeit
Threadsicher
Ajax-UnterstützungjQuery-Plugin
Dojo-Plugin (veraltet)
AJAX Client Side ValidationUnterstützung für Templates
Verschiedene Ergebnistypen
Einfach zu erweitern durch PluginsREST-Plugin (REST basierende Actions, Extension-less URLs)
Convention Plugin (Action Konfiguration via Konventionen und Annotations)
Spring-Plugin (Dependency Injection)
Hibernate-Plugin
JFreechart-Plugin (Charts)
Rome-Plugin (RSS Feeds)Das Ziel ist die Trennung von Präsentation, Datenhaltung und Anwendungslogik. Dies erhöht die Übersicht und die Wartbarkeit. Die Kernelemente in Struts, die zu implementieren sind:

Action
für Programmsteuerung, Schnittstelle zwischen der Ansicht (View) und der Anwendungslogik
JSP
für PräsentationDie Komponenten werden in der zentralen Konfigurationsdatei von Struts miteinander verknüpft.
Beispiel struts-config.xml in Struts1:

Beispiel struts.xml in Struts2:Ein Paradigma ist, in der JSP so wenig Java-Code (Scriptlets) wie möglich zu verwenden. Um dies zu ermöglichen, sollte man die von Struts mitgelieferten Tag-Libs einsetzen, die einem beim Auslesen der Form-Bean helfen.
Beispiel:

<html:text name="RegisterForm" property="emailAddress" size="20"/>

Hier wird das Attribut „emailAddress“ der Action (Struts2) bzw. Form-Bean (Struts1) über die Setter-Methode nach dem Senden des Formulars mit dem Inhalt des Textfeldes gefüllt. Weiterhin wird ein <input type="text" size="20" name="emailAddress" value="..."/> HTML-Element in der JSP generiert.Struts besitzt ebenfalls eine Vorlagen-Erweiterung, Tiles genannt. Sie ermöglichen dem Entwickler, seine Webseiten komponentenbasiert aufzubauen (Header, Footer, Content, und so weiter). Tiles können sowohl JSPs als auch weitere Tiles inkludieren.Ab der Version 1.1 besitzt Struts ein Validierungswerkzeug, das dem Entwickler bei der Überprüfung der abgesendeten Formdaten hilft. Es arbeitet mit sogenannten Validatoren, die eine spezifische Prüfaufgabe durchführen und beliebig wiederverwendet werden können. Struts bringt einige vorgefertigte Validatoren mit (z. B. für die Prüfung, ob ein Feld ausgefüllt ist oder eine gültige Zahl enthält). Stellt ein Validator einen Fehler fest, wird automatisch auf die Ausgangsseite zurückgeleitet und der Fehler angezeigt. Es ist aber auch möglich, den Fehler via JavaScript clientseitig prüfen zu lassen und den Fehler noch vor dem Absenden des Formulars in einem Fenster anzuzeigen.Die Form-Bean ist eine normale JavaBean, die alle benötigten Daten für die JSP und die Action enthält. Sie ist die Schnittstelle zwischen diesen beiden Komponenten und wird über die struts-config mit einem Formular in der JSP verknüpft. Wenn das Formular abgeschickt wird, wird die Bean durch das ActionServlet (noch bevor die Action ausgeführt wird) über die setter-Methoden mit den entsprechenden Eingabewerten gefüttert.
Die FormBean enthält außerdem eine Validierungsmethode, welche, wenn in der Konfiguration aktiviert, die Daten der Form-Bean überprüft, bevor sie zur Action geschickt werden. Außerdem enthält sie eine reset-Methode um den Inhalt zurückzusetzen, damit sie wiederverwendet werden kann, was den Aufwand für die Speicherverwaltung reduziert (siehe: Slab allocator).
Da diese Art der Datenhaltung oft zu starr ist, wurde von den Struts-Entwicklern die Möglichkeit geschaffen, die Beans in der struts-config.xml zu deklarieren, wodurch die starre und aufwändige Programmierung der Beans entfällt. Zum Zugriff wird dann die ActionForm zu einer DynaBean des Apache Commons BeanUtils Projekt gecastet und die Daten werden dann über Schlüssel abgefragt. Bei der Verwendung dynamischer Beans kann außerdem zur Validierung das Commons Validation Framework eingesetzt werden.Die Action ist diejenige Komponente, die mit dem Backend kommuniziert, von ihr Daten holt und sie auch wieder dahin schreibt. Sie enthält meist weitere Prüf- und Auswertungsmechanismen.
Die Action ist ebenfalls für die Navigation durch die Webseite verantwortlich, da sie nach getaner Arbeit ein ActionForward zurückgeben muss. Je nachdem, welchen Forward die Action zurückgibt, entscheidet das Struts-Framework anhand der struts-config, zu welcher Seite weitergeleitet werden soll.