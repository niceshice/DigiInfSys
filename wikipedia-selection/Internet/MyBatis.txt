MyBatis (früher iBATIS zusammengesetzt aus „internet“ und englisch abatis ‚Verhau‘) ist ein Open-Source-Persistenz-Framework für Java und .NET. Für Ruby und Ruby on Rails ist eine portierte Version namens RBatis verfügbar.Die Hauptaufgabe von MyBatis ist die Trennung von Datenbankzugriffscode vom restlichen Applikationscode. Dafür werden der Applikation Data-Access-Objects (kurz DAOs) zur Verfügung gestellt und die SQL-Statements in XML-Dateien, sogenannte SQL-Maps, ausgelagert. Damit wird die Zuordnung von Tabellen zu Klassen von der Geschäftslogik entkoppelt.
MyBatis ist kein Object-Relational-Mapping-Framework (kurz ORM), die Abbildung zwischen objektorientierten Klassen und relationalen Tabellen muss von den Entwicklern selbst vorgenommen werden, ebenso das Schreiben der SQL-Statements für die Abfragen. Somit ist auch die automatische Erstellung eines Datenbankschemas aus der Klassenhierarchie nicht möglich.Das iBATIS-Projekt wurde von Clinton Begin im Jahre 2001 gegründet. Das ursprüngliche Ziel des Projektes war die Entwicklung von kryptographischer Software, was auch ausschlaggebend für den Teil „batis“ im Projektnamen verantwortlich ist („batis“ steht für „abatis“ – engl. für „Verhau“, eine militärische Verteidigungsanlage). Die erste von MyBatis fertiggestellte Software war „Secrets“, ein Open-Source-Verschlüsselungs- und Signierungstool in Java.
Anfang 2002 erschien ein Microsoft-Artikel, der behauptete .NET wäre 10-mal schneller und 4-mal produktiver als J2EE. Das veranlasste das iBATIS-Projekt die Beispielapplikation „JPetStore“ (erste Version 1. Juli 2002) zu schreiben und damit die Behauptungen des Artikels zu widerlegen. Der dabei verwendete Persistenzlayer, die SQL-Maps und Data-Access-Objects, erregte das Aufsehen der Open-Source-Community. Daraus entstand das iBATIS-Framework, das einfach die Zusammenfassung der beiden Teile darstellt.Im Laufe des Jahres 2010 zog iBATIS von der Apache Software Foundation nach Google Code um. Dieser Umzug wurde mit der Verfügbarkeit neuer Technologien im Bereich Soziale Netzwerke, Versionsverwaltung und Open Source Infrastruktur begründet. Dabei wurde auch iBATIS in MyBatis umbenannt. Das Projekt steht aber weiterhin unter der Apache-Lizenz.
Heute ist MyBatis nur mehr das Persistenzframework, weiterhin bestehend aus den beiden Hauptbestandteilen SQL-Maps und Data-Access-Objects. JPetStore fungiert dabei als das offizielle Beispiel für den typischen Gebrauch von MyBatis.Das Framework gibt es derzeit in unterschiedlichen Versionen für die Programmiersprachen Java und .NET. Für Ruby gibt es eine Portierung namens RBatis. Das jBati-Projekt, ein ORM-Mapper für JavaScript ist von MyBatis inspiriert. Das Apache-Projekt iBator bietet ein Tool für MyBatis – es generiert aus Datenbanken die iBATIS-Mapping-Files.Die Hauptfunktionalität von MyBatis ist die Trennung von Datenbankzugriffscode vom restlichen Applikationscode. Die wichtigsten Komponenten dafür sind die Data-Access-Objects, über die die Applikation mit dem Persistenzlayer kommuniziert, sowie die SQL-Maps, die die Datenbankzugriffe entkoppeln.
Wie die meisten Persistenzframeworks bietet MyBatis noch eine Reihe von über die reine Persistenz hinausgehenden Funktionen. Das sind z. B. die Unterstützung für Transaktionen, sowohl lokale als auch globale (d. h. datenbankübergreifende) über JTA und diverse Performanceoptimierungen wie lazy loading, join fetching oder caching.MyBatis beinhaltet einen Code Generator "MyBatis Generator". MyBatis Generator fragt die Datenbank Tabellen ab und generiert "MyBatis artifacts" mit denen CRUD Operationen (Create, Retrieve, Update, Delete) durchgeführt werden können.Ein Eclipse plugin ist verfügbar.Es sei eine Tabelle KUNDE gegeben, die mit folgender SQL-Anweisung erstellt worden ist:

Des Weiteren existiert folgendes POJO:

Um eine Abfrage ausführen zu können, muss eine XML-Deskriptordatei vorhanden sein:

Die Angabe #value# bezieht sich auf den Integer-Wert, der bei der Abfrage mitgegeben werden muss. Als Parameter kann auch ein Objekt oder eine Map verwendet werden, wobei deren Attribute durch die #-Notation genauso eingebunden werden können.
Die Abfrage wird in Java wie folgt geschrieben:

Ohne MyBatis müsste man um funktional dasselbe zu bewirken in Java den folgenden Code schreiben:

Dieser Code wäre nicht nur wesentlich länger, komplexer, fehleranfälliger und schlechter wartbar, sondern wäre auch weniger performant, da hier noch keine der bei MyBatis eingebauten Performanceoptimierungen, wie beispielsweise Connection Pooling, realisiert wurden.